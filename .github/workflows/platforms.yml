name: Platform builds

on: push

jobs:
  build_on_platform:
    name: ${{ matrix.name }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        include:
          - name: ppc64le (Fedora)
            arch: ppc64le
            distro: fedora_latest

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: false

      - uses: uraimo/run-on-arch-action@master
        name: Build artifact
        id: build
        with:
          arch: ${{ matrix.arch }}
          distro: ${{ matrix.distro }}

          # Not required, but speeds up builds
          githubToken: ${{ github.token }}

          # Create an artifacts directory
          setup: |
            mkdir -p "${PWD}/artifacts"

          # Mount the artifacts directory as /artifacts in the container
          dockerRunArgs: |
            --volume "${PWD}/artifacts:/artifacts"

          # The shell to run commands with in the container
          shell: /bin/sh

          # Install some dependencies in the container. This speeds up builds if
          # you are also using githubToken. Any dependencies installed here will
          # be part of the container image that gets cached, so subsequent
          # builds don't have to re-install them. The image layer is cached
          # publicly in your project's package repository, so it is vital that
          # no secrets are present in the container state or logs.
          install: |
            case "${{ matrix.distro }}" in
              ubuntu*|jessie|stretch|buster|bullseye)
                # we only care about issues
                apt-get -qq update  < /dev/null > /dev/null
                apt-get -qq install git curl findutils procps tar zstd screenfetch \
                                    < /dev/null > /dev/null
                apt-get -qq install cmake g++ build-essential ccache libasound2-dev libgtest-dev \
                                    libopusfile-dev libsdl2-dev python3-setuptools python3-pip zlib1g-dev \
                                    libspeexdsp-dev libpng-dev \
                                    < /dev/null > /dev/null
                pip3 install meson ninja
                ;;
              fedora*)
                dnf -q -y update
                dnf -q -y install git which curl findutils procps-ng tar zstd screenfetch
                dnf -q -y install cmake desktop-file-utils gcc gcc-c++ gmock-devel gtest-devel \
                                  libappstream-glib libatomic meson opusfile-devel SDL2-devel zlib-devel
                ;;
              alpine*)
                apk update
                apk add git
                ;;
            esac

          run: |
            # Log the environment
            sh ./scripts/log-env.sh
            screenfetch

            # Setup
            #  - use a minimal build because python fetching wraps segfaults under Docker
            meson setup \
                  -Duse_fluidsynth=false \
                  -Duse_sdl2_net=false \
                  -Duse_opengl=false \
                  -Duse_mt32emu=false \
                  -Duse_slirp=false \
                  -Duse_alsa=false \
                  build
            # Build
            meson compile -C build
            # Test
            meson test --num-processes 128 -t 0 -C build
